#!groovy

pipeline {
    agent { node ("avalanche") }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    stages {
        stage("Login Dockerhub") {
            steps {
                withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID'), string(credentialsId: 'avalancheforecast', variable: 'LOGIN'), string(credentialsId: 'avalanche_password', variable: 'PASS')]) {
                                sh  ("""
                                curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : *Branch*: ${env.GIT_BRANCH} *`Началось развертывание!`*'
                                """)
                echo "=====================Authentification====================="
                sh "sudo docker login -u ${LOGIN} -p ${PASS}"
                }
            }
        }
stage("Removing old containers") {
    steps {
    script{
      try{
        echo "=====================Removing====================="
    sh "cd docker/prod/deploy ; sudo docker-compose down" 
    sh "sudo docker rmi avalancheforecast/main:pipe_web_prod_parser"
    sh "sudo docker rmi avalancheforecast/main:pipe_web_prod_frontend"
    sh "sudo docker rmi avalancheforecast/main:pipe_web_prod_backend"
    echo "Done!"
      } catch (err) {
                echo "Контейнера не было"
            }
        try{
    sh "rm -fR /tmp/web_prod_avalanche_configs"
      } catch (err) {
                echo "Файла не было"
            }
    }
    }
        }
        stage("Run container from Dockerhub") {
            steps {
                echo "=====================Running====================="
                sh "mkdir /tmp/web_prod_avalanche_configs"
                sh "cp nginx/nginx.conf /tmp/web_prod_avalanche_configs/nginx.conf "
                sh "cd docker/prod/deploy ; sudo docker-compose up -d "
            }
        }
    }
      post {
          success { 
          withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
          sh  ("""
              curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC *Branch*: ${env.GIT_BRANCH} *Build* : `Официально задеплоен!)`'
          """)
          }
          }
          aborted {
          withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
          sh  ("""
              curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC *Branch*: ${env.GIT_BRANCH} *Build* : `Отменен`'
          """)
          }
          }
          failure {
          withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
          sh  ("""
              curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC  *Branch*: ${env.GIT_BRANCH} *Build* : `Неудача :( Увы, что-то пошло не так`'
          """)
          }
          }
}
}
